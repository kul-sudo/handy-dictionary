import Head from 'next/head'
import { Rubik } from '@next/font/google'
import { useAtom, atom } from 'jotai'
import { atomWithStorage } from 'jotai/utils'

const wordsAtom = atomWithStorage('words-handy-dictionary', [])
const addWordToggleAtom = atom(false)
const deleteWordToggleAtom = atom(false)
const wordAtom = atom('')
const synonymAtom = atom('')
const meaningAtom = atom('')
const searchInputAtom = atom('')

const rubik = Rubik({ subsets: ['latin'] })

const Center = ({ children }) => {
  return (
    <div style={{ display: 'flex', justifyContent: 'center' }}>{children}</div>
  )
}

const checkIfContains = (word, contains) => {
  const lowerCaseContains = contains.toLowerCase()
 
  let word_ = Array.from(word)

  for (let i = 0; i <= 3; i++) {
    if (word_[i] === 'undefined') {
      word_[i] = ''
    }
  }

  if (word_[0].toLowerCase().includes(lowerCaseContains) || word_[1].toLowerCase().includes(lowerCaseContains) ||
  word_[2].toLowerCase().includes(lowerCaseContains)) {
    return true
  }
  return false
}

const Home = () => {
  const [words, setWords] = useAtom(wordsAtom)

  const [addWord, setAddWord] = useAtom(addWordToggleAtom)
  const [deleteWord, setDeleteWord] = useAtom(deleteWordToggleAtom)

  const [word, setWord] = useAtom(wordAtom)
  const [synonym, setSynonym] = useAtom(synonymAtom)
  const [meaning, setMeaning] = useAtom(meaningAtom)
  const [searchInput, setSearchInput] = useAtom(searchInputAtom)

  const handleWordChange = e => setWord(e.target.value)
  const handleSynonymChange = e => setSynonym(e.target.value)
  const handleMeaningChange = e => setMeaning(e.target.value)
  const handleSearchInputChange = e => setSearchInput(e.target.value)

  return (
    <>
      <Head>
        <title>Handy Dictionary</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Center>
        <div className="text-[#fff] font-[600]">
          <p className={rubik.className}></p>
          <input onChange={handleSearchInputChange} placeholder="Type your word" className="mt-[2rem] bg-[#000] rounded-lg border-gray-800 border-[2.5px] px-[0.8rem] py-[0.5rem] focus-within:ring focus-within:ring-teal-500 outline-none ease-in-out duration-300" />
        </div>
      </Center>

      <Center>
        <div className="grid grid-cols-1 mt-7 gap-[3rem]">
          {Array.from(words).map(word => {
            if (checkIfContains(word, searchInput))
            return (
              <div className="flex flex-col pb-5 rounded-md">
                <Center>
                  <table className="table-fixed w-[50rem] text-left text-sm text-gray-400 font-medium">
                    <thead className="text-xs text-gray-400">
                      <tr>
                        <th scope="col" className="px-6 py-3 font-medium">
                          Word
                        </th>
                        <th scope="col" className="px-6 py-3 font-medium">
                          Synonyms
                        </th>
                        <th scope="col" className="px-6 py-3 font-medium">
                          Meaning
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr className="bg-[#0a0a0a]">
                        <td className="px-6 py-4 text-white w-[100px]" style={{ wordWrap: 'break-word', hyphens: 'auto' }}>
                          {word[0]}
                        </td>
                        <td className="px-6 py-4 w-[50px]" style={{ wordWrap: 'break-word', hyphens: 'auto' }}>
                          {word[1]}
                        </td>
                        <td className="px-6 py-4 w-[50px]" style={{ wordWrap: 'break-word', hyphens: 'auto' }}>
                          {word[2]}
                        </td>
                      </tr>
                    </tbody>
                  </table>
                </Center>

                {deleteWord && (
                  <div className="bg-[#111] rounded-b-xl pb-2">
                    <Center>
                      <button className="mt-2 border-[1.5px] items-center p-3 rounded-lg border-zinc-800 bg-zinc-900 hover:bg-teal-900 hover:border-teal-600 ease-in-out duration-300" onClick={() => {
                        let toReturn = []
                        let dontAdd = true
                        for (let element of words) {
                          if (JSON.stringify([word[0], word[1], word[2]]) !== JSON.stringify(element)) {
                            toReturn.push(element)
                          } else {
                            if (dontAdd) {
                              dontAdd = false
                            } else {
                              toReturn.push(element)
                            }
                          }
                        }
                        setWords(toReturn)
                      }}>
                        <Center>
                          <svg viewBox="0 0 24 24" className="flex-shrink-0 fill-[#fff] object-contain h-6 w-20"><path d="M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z"></path></svg>
                        </Center>
                      </button>
                    </Center>
                  </div>
                )}
              </div>
            )
          })}
        </div>
      </Center>

      <div className="fixed top-5 right-5 items-center">
        <div className="flex flex-col gap-2">
          <button className="border-[1.5px] items-center px-4 py-4 rounded-lg border-gray-800 bg-gray-900 hover:bg-teal-900 hover:border-teal-600 ease-in-out duration-300" onClick={() => {
            setAddWord(!addWord)
          }}>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" className="flex-shrink-0 fill-[#fff] object-contain h-6 w-6"><path d="M 16 3 C 8.832031 3 3 8.832031 3 16 C 3 23.167969 8.832031 29 16 29 C 23.167969 29 29 23.167969 29 16 C 29 8.832031 23.167969 3 16 3 Z M 16 5 C 22.085938 5 27 9.914063 27 16 C 27 22.085938 22.085938 27 16 27 C 9.914063 27 5 22.085938 5 16 C 5 9.914063 9.914063 5 16 5 Z M 15 10 L 15 15 L 10 15 L 10 17 L 15 17 L 15 22 L 17 22 L 17 17 L 22 17 L 22 15 L 17 15 L 17 10 Z"></path></svg>
          </button>
        </div>
      </div>

      <div className="fixed top-[5.5rem] right-5 items-center">
        <div className="flex flex-col gap-2">
          <button className="border-[1.5px] items-center px-4 py-4 rounded-lg border-gray-800 bg-gray-900 hover:bg-teal-900 hover:border-teal-600 ease-in-out duration-300" onClick={() => {
            setDeleteWord(!deleteWord)
          }}>
            <svg viewBox="0 0 24 24" focusable="false" className="flex-shrink-0 fill-[#fff] object-contain h-6 w-6"><path d="M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z"></path></svg>
          </button>
        </div>
      </div>

      {addWord && (
        <div className="absolute top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%]">
          <div className="flex justify-center items-center bg-zinc-900 w-[30rem] h-[25rem] rounded-xl border-[1px] border-[#fff] border-opacity-[0.16]">
            <Center>
              <button onClick={() => {setAddWord(!addWord)}}>
                <div className="fixed top-5 right-5">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" className="flex-shrink-0 fill-current object-contain h-6 w-6 text-gray-700 dark:text-gray-300">
                    <path
                      fill="currentColor"
                      d="M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
                    />
                  </svg>
                </div>
              </button>
              <div className="flex justify-center flex-col gap-5">
                <div className="flex flex-col justify-center items-start gap-2">
                  <p className={rubik.className} style={{ color: 'white' }}>Word:</p>
                  <input onChange={handleWordChange} placeholder="Type your word" className="text-white font-[600] w-[10rem] bg-[#111] placeholder:font-[600] rounded-lg border-gray-800 border-[2.5px] px-[0.8rem] py-[0.5rem] focus-within:ring focus-within:ring-teal-500 outline-none ease-in-out duration-300" />
                </div>
                <div className="flex flex-col justify-center items-start gap-2">
                  <p className={rubik.className} style={{ color: 'white' }}>Synonyms:</p>
                  <input onChange={handleSynonymChange} placeholder="Type your word" className="text-white font-[600] w-[10rem] bg-[#111] placeholder:font-[600] rounded-lg border-gray-800 border-[2.5px] px-[0.8rem] py-[0.5rem] focus-within:ring focus-within:ring-teal-500 outline-none ease-in-out duration-300" />
                </div>
                <div className="flex flex-col justify-center items-start gap-2">
                  <p className={rubik.className} style={{ color: 'white' }}>Meaning:</p>
                  <input onChange={handleMeaningChange} placeholder="Type your word" className="text-white font-[600] w-[10rem] bg-[#111] rounded-lg border-gray-800 border-[2.5px] px-[0.8rem] py-[0.5rem] focus-within:ring focus-within:ring-teal-500 outline-none ease-in-out duration-300" />
                </div>
                <button className="text-white font-[600] border-[1.5px] items-center px-6 py-3 rounded-lg border-gray-800 bg-gray-900 hover:bg-teal-900 hover:border-teal-600 ease-in-out duration-500" onClick={() => {
                  let completeList = [word, synonym, meaning]
                  
                  for (let i = 0; i <= 3; i++) {
                    if (completeList[i] === '') {
                      completeList[i] = 'undefined'
                    }
                  }

                  if (words.length === 0) {
                    setWords(words.concat([completeList]))
                  }

                  for (let element of words) {
                    if (JSON.stringify(element) === JSON.stringify(completeList)) {
                      return
                    }
                  }

                  setWords(words.concat([completeList]))
                  setTimeout(() => {
                    setAddWord(!addWord)
                  }, 50)
                }}>
                  Add word
                </button>
              </div>
            </Center>
          </div>
        </div>
      )}
    </>
  )
}

export default Home
